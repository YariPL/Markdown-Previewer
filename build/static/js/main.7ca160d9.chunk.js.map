{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","marked","require","App","state","markdown","updateMarkdown","this","setState","_this2","console","log","react_default","a","createElement","className","type","id","value","onChange","event","target","dangerouslySetInnerHTML","__html","React","Component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZL,IAAIC,EAASC,EAAQ,IACfC,6MAELC,MAAQ,CACPC,SAAQ,onBA8BTC,eAAiB,SAASD,GAEzBE,KAAKC,SAAS,CACbH,SAASA,6EAGF,IAAAI,EAAAF,KAEHF,EAAYE,KAAKH,MAAjBC,SAGL,OADAK,QAAQC,IAAI,CAACN,aAEZO,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAEdH,EAAAC,EAAAC,cAAA,YAAUE,KAAK,OAAOC,GAAG,SAASC,MAAOb,EAAUU,UAAU,sBAAsBI,SAAU,SAACC,GAAD,OAASX,EAAKH,eAAec,EAAMC,OAAOH,WAExIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAEdH,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UAAUK,wBAA2B,CAACC,OAAQtB,EAAOM,KAAKH,MAAMC,uBArD5DmB,IAAMC,WA6DVtB,YAGfuB,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD0D3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7ca160d9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n//import marked from \"marked\";\n\n\tlet marked = require('marked');\n\tclass App extends React.Component {\n\t\t//create state object with initial text(just for FCC test)\n\t\tstate = {\n\t\t\tmarkdown: `\n# Welcome to my markdown previewer \n## Use input field to put your text and field above to preview what you wrote\n## Feel **free** to use GitHub\"s and HTML markdown to style you text\n1. Item 1\n1. Item 2\n \nhttp://github.com - automatic!\n[GitHub](http://github.com)\n![GitHub Logo](http://icons-for-free.com/icon/download-github_logo_website_icon-2639.ico)\nFormat: ![Alt Text](url)\nAs Kanye West said:\n\n> We're living the future so\n> the present is our past.\nI think you should use an\n\\`<addr>\\` element here instead.\n\\`\\`\\`\nfunction fancyAlert(arg) {\n  if(arg) {\n    $.facebox({div:'#foo'})\n  }\n}\n\\`\\`\\`\n\n`\n\t\t}\n\t\t//updateMarkdown = updateMarkdown.bind(this);\n\n\t\t//function to update the state when print smth into it\n\t\tupdateMarkdown = function(markdown){\n\n\t\t\tthis.setState({\n\t\t\t\tmarkdown:markdown //markdown as a value optional es6\n\t\t\t})\n\t\t}\n\t\trender() {\n\t\t\t//hold what ever this.state is es6\n\t\t\tlet {markdown} = this.state;\t\n\n\t\t\tconsole.log({markdown});\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<div className='editorField'>\n\t\t\t\t\t{/*on chhange run function which runs update function above with parameter of current input value*/}\n\t\t\t\t\t\t<textarea type='text' id=\"editor\" value={markdown} className='editorFieldTextArea' onChange={(event)=>this.updateMarkdown(event.target.value)} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='previewerField'>\n\t\t\t\t\t\t<div className='previewerFieldText'>\n\t\t\t\t\t\t\t{/*this display the value of state with markdown applied*/}\n\t\t\t\t\t\t\t<div id='preview' dangerouslySetInnerHTML = {{__html: marked(this.state.markdown)}} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\nexport default App;\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}